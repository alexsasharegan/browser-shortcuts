(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},_createClass=function(){function a(b,c){for(var e,d=0;d<c.length;d++)e=c[d],e.enumerable=e.enumerable||!1,e.configurable=!0,'value'in e&&(e.writable=!0),Object.defineProperty(b,e.key,e)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function _possibleConstructorReturn(a,b){if(!a)throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');return b&&('object'==typeof b||'function'==typeof b)?b:a}function _inherits(a,b){if('function'!=typeof b&&null!==b)throw new TypeError('Super expression must either be null or a function, not '+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}(function(a,b){'use strict';var c=require('@alexsasharegan/keycodes'),d=require('component-emitter'),e='__keydown',g=function(h){function j(){var k=0<arguments.length&&void 0!==arguments[0]?arguments[0]:window;_classCallCheck(this,j);var l=_possibleConstructorReturn(this,(j.__proto__||Object.getPrototypeOf(j)).call(this));return l.handleKeyDown=l.handleKeyDown.bind(l),l.handleKeyUp=l.handleKeyUp.bind(l),l._keyMap={},l._shortcuts={},l.on(e,l.handleShortcuts),j.addEvents(k,{keydown:l.handleKeyDown,keyup:l.handleKeyUp}),l}return _inherits(j,h),_createClass(j,[{key:'handleKeyDown',value:function handleKeyDown(k){k.preventDefault();var l=c(k,!0);this._keyMap[l]=c(l),this.emit(e,k)}},{key:'handleKeyUp',value:function handleKeyUp(k){k.preventDefault();var l=c(k,!0);delete this._keyMap[l],this.emit('__keyup',k)}},{key:'handleShortcuts',value:function handleShortcuts(k){var l=this;Object.keys(this._shortcuts).forEach(function(m){for(var n=l._shortcuts[m],p=0;p<n.length;p++)if(!l.testKeyDown(n[p])){break}console.log({shouldFire:o,keymap:l._keyMap}),o&&l.emit(m,k)})}},{key:'createShortcut',value:function createShortcut(k,l){return this._shortcuts[k]=(Array.isArray(l)?l:l.split('+')).map(function(m){return c(m,!0)}),this}},{key:'testKeyDown',value:function testKeyDown(k){if(Array.isArray(k)){for(var m,l=0;l<k.length;l++)if(m=!!this._keyMap[k[l]],m)return m;return!1}return!!this._keyMap[k]}}],[{key:'addEvent',value:function addEvent(k,l,m){k.addEventListener?k.addEventListener((l+'').toLowerCase(),m,!1):k.attachEvent('on'+(l+'').toLowerCase(),m)}},{key:'addEvents',value:function addEvents(k){var l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},m=function _loop(n){var o=l[n];'function'==typeof o?j.addEvent(k,n,o):o.forEach(function(p){return j.addEvent(k,n,p)})};for(var n in l)m(n)}},{key:'addEventOnce',value:function addEventOnce(k,l,m){function n(){return j.removeEvent(k,l,n),m.apply(this,arguments)}j.addEvent(k,l,n)}},{key:'removeEvent',value:function removeEvent(k,l,m){k.removeEventListener(l,m,!1)}}]),j}(d);return window.Shortcuts=g,a?module.exports=g:b&&(b.Shortcuts=g),g})('object'===('undefined'==typeof module?'undefined':_typeof(module))&&'object'===_typeof(module.exports),'undefined'==typeof window?null:window);

},{"@alexsasharegan/keycodes":2,"component-emitter":3}],2:[function(require,module,exports){
(function ( exports, global ) {
	'use strict';
	
	const numToStrMap = {
		0: 'ZERO',
		1: 'ONE',
		2: 'TWO',
		3: 'THREE',
		4: 'FOUR',
		5: 'FIVE',
		6: 'SIX',
		7: 'SEVEN',
		8: 'EIGHT',
		9: 'NINE',
	};
	
	const NAMES = {
		BACKSPACE: 8,
		TAB: 9,
		CLEAR: 12,
		RETURN: 13,
		ENTER: 13,
		SHIFT: 16,
		CONTROL: 17,
		ALT: 18,
		OPTION: 18,
		PAUSE_BREAK: 19,
		CAPS_LOCK: 20,
		ESCAPE: 27,
		SPACE_BAR: 32,
		PAGE_UP: 33,
		PAGE_DOWN: 34,
		END: 35,
		HOME: 36,
		LEFT_ARROW: 37,
		UP_ARROW: 38,
		RIGHT_ARROW: 39,
		DOWN_ARROW: 40,
		INSERT: 45,
		DELETE: 46,
		COMMAND: [ 91, 93, 224 ],
		COMMAND_LEFT: [ 91, 224 ],
		WINDOWS: [ 91, 224 ],
		COMMAND_RIGHT: [ 93, 224 ],
		WINDOWS_MENU: [ 93, 224 ],
		NUMPAD_ASTERISK: 106,
		NUMPAD_PLUS: 107,
		NUMPAD_DASH: 109,
		NUMPAD_MINUS: 109,
		NUMPAD_HYPHEN: 109,
		NUMPAD_PERIOD: 110,
		NUMPAD_FORWARD_SLASH: 111,
		NUM_LOCK: 144,
		SCROLL_LOCK: 145,
		MY_COMPUTER: 182,
		MY_CALCULATOR: 183,
		SEMICOLON: 186,
		EQUALS: 187,
		COMMA: 188,
		DASH: 189,
		MINUS: 189,
		HYPHEN: 189,
		PERIOD: 190,
		FORWARD_SLASH: 191,
		BACKTICK: 192,
		LEFT_BRACKET: 219,
		BACKSLASH: 220,
		RIGHT_BRACKET: 221,
		APOSTROPHE: 222
	};
	
	/***************************** Dynamic Allocation *****************************/
	
	// letters
	for ( let i = 65; i < 91; i++ ) NAMES[ String.fromCharCode( i ) ] = i;
	
	// function keys
	for ( let i = 1; i <= 19; i++ ) NAMES[ `F${i}` ] = i + 111;
	
	// numbers
	for ( let i = 0; i <= 9; i++ ) NAMES[ numToStrMap[ i ] ] = i + 48;
	
	// numeric keypad keys
	for ( let i = 0; i <= 9; i++ ) NAMES[ `NUMPAD_${numToStrMap[ i ]}` ] = i + 96;
	
	// reverse mapping
	const CODES = {};
	for ( let name in NAMES ) {
		let code = NAMES[ name ];
		
		if ( Array.isArray( code ) ) code.forEach( codeVal => CODES[ codeVal ] = name );
		else CODES[ code ] = name;
	}
	
	function getCodeFromName( search ) {
		const RE = /\s+/g;
		let name = String( search ).toUpperCase();
		if ( RE.test( name ) ) name = name.replace( RE, '_' );
		
		return NAMES[ name ];
	}
	
	function keycode( search, returnAsCode = false ) {
		// Normalize from event object
		if ( search && typeof search === 'object' ) {
			let hasKeyCode = search.which || search.keyCode || search.charCode;
			if ( hasKeyCode ) search = hasKeyCode;
		}
		
		// Number codes
		if ( typeof search === 'number' ) return returnAsCode ? search : CODES[ search ];
		
		return getCodeFromName( search );
	};
	
	function is( key, search ) {
		let target = typeof key === 'number' ? key : getCodeFromName( key );
		
		return (
			search
				? keycode( search, true ) === target
				: curriedSearch => target === keycode( curriedSearch, true )
		);
	}
	
	keycode.is    = is;
	keycode.names = NAMES;
	keycode.codes = CODES;
	
	if ( exports ) module.exports = keycode;
	else if ( global ) global.keycode = keycode;
	
	return keycode;
}(
	typeof module === "object" && typeof module.exports === "object"
	, typeof window !== "undefined" ? window : null
));

},{}],3:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}]},{},[1]);
